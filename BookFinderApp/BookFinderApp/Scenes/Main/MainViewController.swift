//
//  MainViewController.swift
//  BookFinderApp
//
//  Created by 김나희 on 9/1/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import SafariServices
import UIKit

protocol MainDisplayLogic: AnyObject {
    func displayBookData(viewModel: Main.BookData.ViewModelSuccess)
    func displayError(viewModel: Main.BookData.ViewModelFailure)
}

class MainViewController: UITableViewController, MainDisplayLogic {
    var interactor: MainBusinessLogic?
    var router: (NSObjectProtocol & MainRoutingLogic & MainDataPassing)?
    
    private lazy var searchController = UISearchController().then {
        $0.searchBar.placeholder = "검색어를 입력해주세요."
        $0.searchBar.delegate = self
    }
    
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setupVIP()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setupVIP()
    }
    
    // MARK: Setup
    
    private func setupVIP() {
        let viewController = self
        let interactor = MainInteractor()
        let presenter = MainPresenter()
        let router = MainRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        configureUI()
    }
    
    
    private func configureUI() {
        view.backgroundColor = .systemBackground
        tableView.register(BookTableViewCell.self, forCellReuseIdentifier: BookTableViewCell.identifier)
        self.navigationItem.searchController = searchController
        self.navigationItem.title = "책 검색"
        self.navigationItem.hidesSearchBarWhenScrolling = false
    }
    
    var displayedBooks: DisplayedBookData?
    
    // MARK: Do something
    func displayBookData(viewModel: Main.BookData.ViewModelSuccess) {
        displayedBooks = viewModel.displayedBooks
        tableView.reloadData()
    }
    
    func displayError(viewModel: Main.BookData.ViewModelFailure) {
        print(viewModel.errorMessage)
    }
    
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        displayedBooks?.books?.count ?? 0
    }
    
    override func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        100
    }
    
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let data = displayedBooks,
              let book = data.books else { return UITableViewCell() }
        
        let displayedBook = book[indexPath.row]
        guard let cell = tableView.dequeueReusableCell(withIdentifier: BookTableViewCell.identifier, for: indexPath) as? BookTableViewCell else {
            return UITableViewCell()
        }
        cell.configureData(displayedBook)
        
        return cell
    }
    
    override func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -> String? {
        if let count = displayedBooks?.totalItemCount {
            return "결과 \(count)개"
        }
        return nil
    }
    
    override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        guard let data = displayedBooks,
              let book = data.books else { return }
        
        let displayedBook = book[indexPath.row]
        if let url = URL(string: displayedBook.infoLink) {
            let safariViewController = SFSafariViewController(url: url)
            self.present(safariViewController, animated: true, completion: nil)
        }
    }
}

extension MainViewController: UISearchBarDelegate {
    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
        if let keyword = searchBar.text {
            let request = Main.BookData.Request(keyword: keyword)
            interactor?.fetchBookData(request: request)
        }
    }
}
